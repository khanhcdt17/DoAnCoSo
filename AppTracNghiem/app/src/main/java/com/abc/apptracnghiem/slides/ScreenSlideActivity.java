package com.abc.apptracnghiem.slides;import android.app.Dialog;import android.content.Intent;import android.os.CountDownTimer;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentActivity;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentStatePagerAdapter;import android.support.v4.view.PagerAdapter;import android.support.v4.view.ViewPager;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.AdapterView;import android.widget.Button;import android.widget.GridView;import android.widget.QuickContactBadge;import android.widget.TextView;import com.abc.apptracnghiem.MainActivity;import com.abc.apptracnghiem.Question.Question;import com.abc.apptracnghiem.Question.QuestionController;import com.abc.apptracnghiem.R;import java.util.ArrayList;import java.util.concurrent.TimeUnit;public class ScreenSlideActivity extends FragmentActivity {    /**     * The number of pages (wizard steps) to show in this demo.     */    private static final int NUM_PAGES = 15;    /**     * The pager widget, which handles animation and allows swiping horizontally to access previous     * and next wizard steps.     */    private ViewPager mPager;    /**     * The pager adapter, which provides the pages to the view pager widget.     */    private PagerAdapter pagerAdapter;    Button btnExit;    TextView tvKiemTra;    TextView tvTimer, tvScore, tvExplaintion;    //Bien    CounterClass timer;    String topic;    int typeQuestion;    public int checkAnser = 0;    //CSDL    QuestionController questionController;    ArrayList<Question> questions;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_screen_slide);        // Instantiate a ViewPager and a PagerAdapter.        mPager = findViewById(R.id.pager);        pagerAdapter = new ScreenSlidePagerAdapter(getSupportFragmentManager());        mPager.setAdapter(pagerAdapter);        mPager.setPageTransformer(true, new ZoomOutPageTransformer());        Intent intent = getIntent();        topic = intent.getStringExtra("topic");        typeQuestion = intent.getIntExtra("type_question",0);        //Log.d("CHECK111",typeQuestion+"");        questionController = new QuestionController(this);        questions = new ArrayList<>();        questions = questionController.getQuestion(topic, typeQuestion);        btnExit = findViewById(R.id.btnExit);        tvKiemTra = findViewById(R.id.tvKiemTra);        tvScore = findViewById(R.id.tvScore);        tvTimer = findViewById(R.id.tvTimer);        timer = new CounterClass(3 * 60 * 1000, 1000);        btnExit.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {//                Intent i=new Intent(getApplicationContext(), MainActivity.class);//                i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);//                startActivity(i);                finish();            }        });        tvKiemTra.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                checkAnswer();            }        });        tvTimer.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {            }        });        timer.start();    }    public ArrayList<Question> getData() {        return questions;    }    @Override    public void onBackPressed() {        if (mPager.getCurrentItem() == 0) {            // If the user is currently looking at the first step, allow the system to handle the            // Back button. This calls finish() on this activity and pops the back stack.            super.onBackPressed();        } else {            // Otherwise, select the previous step.            mPager.setCurrentItem(mPager.getCurrentItem() - 1);        }    }    /**     * A simple pager adapter that represents 5 ScreenSlidePageFragment objects, in     * sequence.     */    private class ScreenSlidePagerAdapter extends FragmentStatePagerAdapter {        public ScreenSlidePagerAdapter(FragmentManager fm) {            super(fm);        }        @Override        public Fragment getItem(int position) {            return ScreenSlidePageFragment.create(position, checkAnser);        }        @Override        public int getCount() {            return NUM_PAGES;        }    }    public class ZoomOutPageTransformer implements ViewPager.PageTransformer {        private static final float MIN_SCALE = 0.85f;        private static final float MIN_ALPHA = 0.5f;        public void transformPage(View view, float position) {            int pageWidth = view.getWidth();            int pageHeight = view.getHeight();            if (position < -1) { // [-Infinity,-1)                // This page is way off-screen to the left.                view.setAlpha(0f);            } else if (position <= 1) { // [-1,1]                // Modify the default slide transition to shrink the page as well                float scaleFactor = Math.max(MIN_SCALE, 1 - Math.abs(position));                float vertMargin = pageHeight * (1 - scaleFactor) / 2;                float horzMargin = pageWidth * (1 - scaleFactor) / 2;                if (position < 0) {                    view.setTranslationX(horzMargin - vertMargin / 2);                } else {                    view.setTranslationX(-horzMargin + vertMargin / 2);                }                // Scale the page down (between MIN_SCALE and 1)                view.setScaleX(scaleFactor);                view.setScaleY(scaleFactor);                // Fade the page relative to its size.                view.setAlpha(MIN_ALPHA +                        (scaleFactor - MIN_SCALE) /                                (1 - MIN_SCALE) * (1 - MIN_ALPHA));            } else { // (1,+Infinity]                // This page is way off-screen to the right.                view.setAlpha(0f);            }        }    }    public void checkAnswer() {        final Dialog dialog = new Dialog(this);        dialog.setContentView(R.layout.check_answer_dialog);        dialog.setTitle("List Answer");        CheckAnswerAdapter adapter = new CheckAnswerAdapter(questions, this);        GridView gvLsQuestion = dialog.findViewById(R.id.gvLvQuestion);        gvLsQuestion.setAdapter(adapter);        gvLsQuestion.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                mPager.setCurrentItem(position);                dialog.dismiss();            }        });        Button btnCancel, btnFinish;        btnCancel = dialog.findViewById(R.id.btnCancel);        btnFinish = dialog.findViewById(R.id.btnFinish);        tvExplaintion = mPager.findViewById(R.id.tvExplaintion);        btnCancel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                dialog.dismiss();            }        });        btnFinish.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                timer.cancel();                setStatus();                dialog.dismiss();            }        });        dialog.show();    }    public void setStatus() {        checkAnser = 1;        if (mPager.getCurrentItem() >= 5) mPager.setCurrentItem(mPager.getCurrentItem() - 4);        else if (mPager.getCurrentItem() <= 5) mPager.setCurrentItem(mPager.getCurrentItem() + 4);        tvScore.setVisibility(View.VISIBLE);        tvKiemTra.setVisibility(View.GONE);    }    public class CounterClass extends CountDownTimer {        /**         * @param millisInFuture    The number of millis in the future from the call         *                          to {@link #start()} until the countdown is done and {@link #onFinish()}         *                          is called.         * @param countDownInterval The interval along the way to receive         *                          {@link #onTick(long)} callbacks.         */        //millisInFuture 60s=60*1000        //countDownInterval đếm ngược 1s=1000        public CounterClass(long millisInFuture, long countDownInterval) {            super(millisInFuture, countDownInterval);        }        @Override        public void onTick(long millisUntilFinished) {            String countTime = String.format("%02d:%02d", TimeUnit.MILLISECONDS.toMinutes(millisUntilFinished), TimeUnit.MILLISECONDS.toSeconds(millisUntilFinished) - TimeUnit.MINUTES.toSeconds(                    TimeUnit.MILLISECONDS.toMinutes(millisUntilFinished)));            tvTimer.setText(countTime); //SetText cho textview hiện thị thời gian.        }        @Override        public void onFinish() {            tvTimer.setText("00:00");  //SetText cho textview hiện thị thời gian.            setStatus();        }    }}